package first;

import java.util.*;

public class twoo {  

	public static void main(String[] args) {
		
		PlusProches_et_Optimisation((Saisie_initialise()));

	}

	static double dist(int x1, int y1, int x2, int y2)

	{
		
	 double distance = Math.pow(Math.pow((x1-x2), 2)+ Math.pow(y1-y2, 2),0.5);
	 return  distance;
	}

	static HashMap<ArrayList<Integer>,Double>  Saisie_initialise()
	
	{
		
		HashMap<ArrayList<Integer>,Double> distances = new HashMap <ArrayList<Integer>,Double>();
		
		Scanner scan = new Scanner(System.in);

		System.out.println("Enter the number of coordonates: ");
		int numb = scan.nextInt();
		
		ArrayList<ArrayList<Integer>> coord = new ArrayList<ArrayList<Integer>>();
		
		for(int i = 0; i<numb; i++) {
			
			coord.add(new ArrayList <Integer>());
			
			System.out.println("Enter the " + (i+1) + "Â°" + " coordonate of your list: ");
			
			System.out.println("x:");
			coord.get(i).add(scan.nextInt());
			
			System.out.println("y:");
			coord.get(i).add(scan.nextInt());
	    }
		
		System.out.println("Enter the coordonate x of the garbage:");
		int x = scan.nextInt();
		
		System.out.println("Enter the coordonate y of the garbage:");
		int y = scan.nextInt();
		
		for(int j = 0; j<coord.size();j++) {
			distances.put(coord.get(j), dist(x,y,coord.get(j).get(0),coord.get(j).get(1)));
		}
		
		scan.close();

		return distances;
	}
	
	static void PlusProches_et_Optimisation (HashMap<ArrayList<Integer>,Double> dists)


	
	{
		ArrayList<Integer> MinKey1 = new ArrayList<Integer>();
		ArrayList<Integer> MinKey2 = new ArrayList<Integer>();
		ArrayList<Integer> MinKey3 = new ArrayList<Integer>();
		double min1;
		double min2;
		
		var entrySet = dists.entrySet();
		
		for(var entry : entrySet) {
			
			if(entry.getValue().equals(Collections.min(dists.values()))) {
				
				MinKey1 = entry.getKey();
			}
			
		}
			
		min1 = 	Collections.min(dists.values());
		dists.remove(MinKey1);	
			
		for(var entry2 : entrySet) {
			
			if(entry2.getValue().equals(Collections.min(dists.values()))) {
				
				MinKey2 = entry2.getKey();
			}
			
		}
			
		min2 = 	Collections.min(dists.values());	
		dists.remove(MinKey2);	
		
		for(var entry3 : entrySet) {
			
			if(entry3.getValue().equals(Collections.min(dists.values()))) {
				
				MinKey3 = entry3.getKey();
			}
		}

		System.out.println("The closest house is the " + MinKey1 + " at " + min1);
		System.out.println("The 3 closest houses are the " + MinKey1 + " ," + MinKey2 + " ," + MinKey3 + " at " + min1 + " ," + min2 + " ," + Collections.min(dists.values()));
		
	
		ArrayList<Integer> opt = new ArrayList<Integer>();
		int mx = (MinKey1.get(0) + MinKey2.get(0) + MinKey3.get(0))/3;
		int my = (MinKey1.get(1) + MinKey2.get(1) + MinKey3.get(1))/3;
		
		opt.add(mx);
		opt.add(my);
		
		System.out.println("The best place for the garbage is the " + opt);
		
		
		
		
	}

}

//THIS PROGRAM ONLY WORKS WITH TWO DIMENSIONS COORDINATES//
//CANNOT HAVE TWO SAME COORDS//
//3 OR MORE COORDS MINIMUM FOR THE PROGRAM TO RUN//
